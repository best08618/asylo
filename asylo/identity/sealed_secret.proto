//
// Copyright 2017 Asylo authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto2";

// $title: Sealed Secret
// $overview: Representation of secrets that are sealed against a local or remote sealing root.
// $location: https://asylo.dev/docs/reference/proto/identity/asylo.sealed_secret.v1.html
// $front_matter: redirect_from: /docs/reference/proto/identity/sealed_secret.html

// A secret is data that should only be readable by the intended parties. When
// a secret is *sealed* to an ACL of one or more enclave identities, the
// encrypted secret is only decryptable by enclaves whose identities match that
// ACL expectation.
package asylo;

import "asylo/identity/identity.proto";
import "asylo/identity/identity_acl.proto";

// A type of sealing root.
enum SealingRootType {
  // Indicates that the secret is sealed to a machine-local (e.g., CPU-based)
  // sealing root.
  LOCAL = 1;

  // Indicates that the secret is sealed to a remote-service-based sealing root
  // (e.g., a secret-escrow service).
  REMOTE = 2;
}

// Represents information about a sealing root. This information is used by the
// program to instantiate the correct implementation of the `SecretSealer`
// interface.
message SealingRootInformation {
  // Type of the sealing root. When combined with `sealing_root_name`,
  // it uniquely identifies the `SecretSealer` responsible for handling the
  // associated secrets.
  optional SealingRootType sealing_root_type = 1;

  // Name of the sealing root. The `sealing_root_name` is an arbitrary, UTF-8
  // string, with the only restriction that it may not contain the
  // character '#'.
  optional string sealing_root_name = 2;

  // ACL consisting of enclave-identity expectations for a sealing root of type
  // `REMOTE`. For such a root, the `SecretSealer` ensures that the remote
  // root's set of enclave identities set satisfies `sealing_root_acl`.
  optional IdentityAclPredicate sealing_root_acl = 3;

  // Additional information. The `additional_info` field is an opaque field that
  // is used by the `SecretSealer` to wrap and unwrap the secrets correctly.
  // Some example uses of this field include:
  //
  //  * Keeping track of the cipher suite used for wrapping the secrets.
  //  * Keeping track of the SVN (Security Version Number) of the root.
  optional bytes additional_info = 4;
}

message SealedSecretHeader {
  // Name of the secret. This is an arbitrary, user-defined string. The
  // `SecretSealer` does not associate any meaning with this value.
  //
  // Users of the `SecretSealer` interface are expected to populate this field.
  optional string secret_name = 1;

  // Version of the secret. This is an arbitrary user-defined string. The
  // `SecretSealer` does not associate any meaning with this value.
  //
  // Users of the `SecretSealer` interface are expected to populate this field.
  optional string secret_version = 2;

  // Purpose of the secret. This is an arbitrary, user-defined string. The
  // `SecretSealer` does not associate any meaning with this value.
  //
  // Users of the `SecretSealer` interface are expected to populate this field.
  optional string secret_purpose = 3;

  // Information about the sealing root.
  //
  // `SecretSealer::SetDefaultHeader()` must populate this field.
  optional SealingRootInformation root_info = 4;

  // An optional list of identities belonging to the author of the sealed
  // secret.
  //
  // The `SecretSealer::Seal()` and `SecretSealer::Reseal()` methods must
  // populate this field.
  repeated EnclaveIdentity author = 5;

  // ACL consisting of the enclave-identity expectations that are allowed to
  // access this secret.
  //
  // `SecretSealer::SetDefaultHeader()` must populate this field.
  optional IdentityAclPredicate client_acl = 6;

  // Policy that the client is expected to enforce on the unwrapped secret.
  // `secret_handling_policy` is an opaque field, and its interpretation is
  // specific to the client and/or secret.
  //
  // User of the `SecretSealer` interface is expected to populate this field.
  optional bytes secret_handling_policy = 7;
}

message SealedSecret {
  // Initialization vector used by the AEAD scheme used for encrypting the
  // secret. The size of the IV depends on the cipher suite used for the
  // encryption (which may be included in the
  // SealingRootInformation::additional_info field).
  optional bytes iv = 1;

  // Serialized SealedSecretHeader. The header is included in its serialized
  // form to enable deterministic MAC computation.
  optional bytes sealed_secret_header = 2;

  // Data whose integrity and authenticity are verifiable.
  optional bytes additional_authenticated_data = 3;

  // Ciphertext as computed by an appropriate AEAD scheme.
  optional bytes secret_ciphertext = 4;

  // Bookkeeping information for the sealing root. This information is
  // strictly optional, and has no meaning for the client.
  optional bytes sealing_root_bookkeeping_info = 5;
}
