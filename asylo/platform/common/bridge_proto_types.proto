//
// Copyright 2017 Asylo authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto2";

package asylo;
message SockaddrProto {
  message SockaddrIn {
    optional uint32 sin_port = 1;
    optional uint32 sin_addr = 2;
  }
  message SockaddrIn6 {
    optional uint32 sin6_port = 1;
    optional uint32 sin6_flowinfo = 2;
    optional bytes sin6_addr = 3;
    optional uint32 sin6_scope_id = 4;
  }
  oneof family {
    SockaddrIn sockaddr_in = 1;
    SockaddrIn6 sockaddr_in6 = 2;
  }
}

message AddrinfoProto {
  optional int32 ai_flags = 1;
  optional int32 ai_family = 2;
  optional int32 ai_socktype = 3;
  optional int32 ai_protocol = 4;

  optional uint32 ai_addrlen = 5;
  optional SockaddrProto ai_addr = 6;  // Not required for hints
  optional string ai_canonname = 7;    // Only if AI_CANONNAME in hints.ai_flags
}

message AddrinfosProto {
  repeated AddrinfoProto addrinfos = 1;
}

message IfAddrProto {
  enum IfAddrFlag {
    DEFAULT = 0;
    PROTO_UP = 1;
    PROTO_BROADCAST = 2;
    PROTO_DEBUG = 3;
    PROTO_LOOPBACK = 4;
    PROTO_POINTOPOINT = 5;
    PROTO_NOTRAILERS = 6;
    PROTO_RUNNING = 7;
    PROTO_NOARP = 8;
    PROTO_PROMISC = 9;
    PROTO_ALLMULTI = 10;
    PROTO_MULTICAST = 11;
  }
  optional string ifa_name = 1;
  repeated IfAddrFlag ifa_flags = 2;
  optional SockaddrProto ifa_addr = 3;
  optional SockaddrProto ifa_netmask = 4;
  optional SockaddrProto ifa_ifu = 5;
}

message IfAddrsProto {
  repeated IfAddrProto ifaddrs = 1;
}

message EpollEvent {
  enum EpollEventFlag {
    DEFAULT = 0;
    PROTO_IN = 1;
    PROTO_PRI = 2;
    PROTO_OUT = 3;
    PROTO_RDNORM = 4;
    PROTO_RDBAND = 5;
    PROTO_WRNORM = 6;
    PROTO_WRBAND = 7;
    PROTO_MSG = 8;
    PROTO_ERR = 9;
    PROTO_HUP = 10;
    PROTO_RDHUP = 11;
    PROTO_WAKEUP = 12;
    PROTO_ONESHOT = 13;
    PROTO_ET = 14;
  }
  repeated EpollEventFlag event_flags = 1;
  optional uint64 data = 2;
}

message EpollEventList {
  repeated EpollEvent events = 1;
}

message EpollCtlArgs {
  enum EpollCtlOp {
    UNSUPPORTED = 0;
    PROTO_CTL_ADD = 1;
    PROTO_CTL_DEL = 2;
    PROTO_CTL_MOD = 3;
  }
  optional int32 epfd = 4;
  optional EpollCtlOp op = 5;
  optional int32 hostfd = 6;
  optional EpollEvent event = 7;
}

message EpollWaitArgs {
  optional int32 epfd = 1;
  optional int32 maxevents = 2;
  optional int32 timeout = 3;
}

enum InotifyFlag {
  DEFAULT = 0;
  PROTO_ACCESS = 1;
  PROTO_ATTRIB = 2;
  PROTO_CLOSE_WRITE = 3;
  PROTO_CLOSE_NOWRITE = 4;
  PROTO_CREATE = 5;
  PROTO_DELETE = 6;
  PROTO_DELETE_SELF = 7;
  PROTO_MODIFY = 8;
  PROTO_MOVE_SELF = 9;
  PROTO_MOVED_FROM = 10;
  PROTO_MOVED_TO = 11;
  PROTO_OPEN = 12;
  PROTO_DONT_FOLLOW = 13;
  PROTO_EXCL_UNLINK = 14;
  PROTO_MASK_ADD = 15;
  PROTO_ONESHOT = 16;
  PROTO_ONLYDIR = 17;
  PROTO_IGNORED = 18;
  PROTO_ISDIR = 19;
  PROTO_Q_OVERFLOW = 20;
  PROTO_UNMOUNT = 21;
}

message InotifyAddWatchArgs {
  optional int32 fd = 1;
  optional string pathname = 2;
  repeated InotifyFlag mask = 3;
}

message InotifyRmWatchArgs {
  optional int32 fd = 1;
  optional int32 wd = 2;
}

message InotifyEvent {
  optional int32 wd = 1;
  repeated InotifyFlag mask = 2;
  optional uint32 cookie = 3;
  optional bytes name = 4;
}

message InotifyEventList {
  repeated InotifyEvent events = 1;
}

enum RecvSendFlags {
  PROTO_DEFAULT = 0;
  PROTO_OOB = 1;
  PROTO_PEEK = 2;
  PROTO_DONTROUTE = 3;
  PROTO_CTRUNC = 4;
  PROTO_PROXY = 5;
  PROTO_TRUNC = 6;
  PROTO_DONTWAIT = 7;
  PROTO_EOR = 8;
  PROTO_WAITALL = 9;
  PROTO_FIN = 10;
  PROTO_SYN = 11;
  PROTO_CONFIRM = 12;
  PROTO_RST = 13;
  PROTO_ERRQUEUE = 14;
  PROTO_NOSIGNAL = 15;
  PROTO_MORE = 16;
  PROTO_WAITFORONE = 17;
  PROTO_FASTOPEN = 18;
  PROTO_CMSG_CLOEXEC = 19;
}
message RecvFromArgs {
  optional int32 sockfd = 1;
  optional uint64 len = 2;
  repeated RecvSendFlags flags = 3;
}

message RecvFromSrcAddr {
  optional SockaddrProto src_addr = 1;
}